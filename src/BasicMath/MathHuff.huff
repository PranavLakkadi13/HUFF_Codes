// Interfaces
#define function add(uint a, uint b) pure returns (uint)
#define function sub(uint a, uint b) pure returns (uint)
#define function mul(uint a, uint b) pure returns (uint)
#define function div(uint a, uint b) pure returns (uint)
#define function mod(uint a, uint b) pure returns (uint)
#define function prime(uint a) pure returns (bool)
#define function sum(uint256[] calldata nums) pure returns (uint)


// Errors 
#define error InvalidCallDataSize()
#define error MSGValueNotZero()
#define error OverflowError()
#define error UnderFlowError()
#define error DivByZeroError()



#define macro MAIN() = takes(0) returns(0) {
    callvalue              // [msg.value]
    iszero                 // [bool]
    iszero                 // [bool]
    MSGError               // [PC,bool]
    jumpi

    0x04                   // [0x04]
    calldatasize           // [calldatasize, 0x04]
    lt                     // [bool]
    iszero                 // [bool]
    iszero                 // [bool]
    size_error             // [PC,bool]
    jumpi                  // [] 

    0x00                   // [0]
    calldataload           // [calldata]
    0xe0                   // [0xe0, calldata]
    shr                    // [func_selector]
    dup1                   // [func_selector, func_selector]

    __FUNC_SIG(add)        // [add_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    add_selector           // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    dup1                   // [func_selector, func_selector] 
    __FUNC_SIG(sub)        // [sub_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    sub_selector           // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    dup1                   // [func_selector, func_selector]
    __FUNC_SIG(mul)        // [mul_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    mul_selector           // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    dup1                   // [func_selector, func_selector]
    __FUNC_SIG(div)        // [div_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    div_selector           // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    dup1                   // [func_selector, func_selector]
    __FUNC_SIG(mod)        // [mod_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    mod_selector           // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    dup1                   // [func_selector, func_selector]
    __FUNC_SIG(prime)      // [prime_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    prime_selector         // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    dup1                   // [func_selector, func_selector]
    __FUNC_SIG(sum)        // [sum_array_selector,func_selector,func_selector]
    eq                     // [bool,func_selector]
    sum_array_selector     // [PC,bool,func_selector]
    jumpi                  // [func_selector]

    0x20
    0x00
    revert 



    size_error:
        SIZE_ERROR()       
        
    MSGError:
        MSGValueERROR()    
        
    add_selector:
        Add()              

    sub_selector:
        Sub()              

    mul_selector:
        Mul()              

    div_selector:
        Div()               

    mod_selector:
        Mod()                          

    prime_selector:
        Prime()

    sum_array_selector:
        SumArray()
}




#define macro SIZE_ERROR() = takes(0) returns(0) {
    0x00                               // [0x00]
    __ERROR(InvalidCallDataSize)       // [calldata,0x00]
    0x00                               // [0x00, calldata,0x00]
    mstore                             // [0x00]  memory: 0x00 -> error_selector
    0x04                               // [0x04, 0x00]
    mstore                             // []   memory: 0x00 -> error_selector, 0x04 -> error_data
    0x24                               // [0x24]
    0x00                               // [0x00 ,0x24]
    revert                             // []
}


#define macro MSGValueERROR() = takes(0) returns(0) {
    0x00                               // [0x00]
    __ERROR(MSGValueNotZero)           // [calldata,0x00]
    0x00                               // [0x00, calldata,0x00]
    mstore                             // [0x00]  memory: 0x00 -> error_selector
    0x04                               // [0x04, 0x00]
    mstore                             // []   memory: 0x00 -> error_selector, 0x04 -> error_data
    0x24                               // [0x24]
    0x00                               // [0x00, 0x24]
    revert                             // []
}


#define macro OverflowRevert() = takes(0) returns(0) {
    0x11                               // [0x11]
    __ERROR(OverflowError)             // [calldata,0x11]
    0x00                               // [0x00, calldata,0x11]
    mstore                             // [0x11]  memory: 0x00 -> error_selector
    0x04                               // [0x04, 0x11]
    mstore                             // []   memory: 0x00 -> error_selector, 0x04 -> error_data
    0x24                               // [0x24]
    0x00                               // [0x00, 0x24]
    revert                             // []
}

#define macro UnderFlowRevert() = takes(0) returns(0) {
    0x11                               // [0x11]
    __ERROR(UnderFlowError)            // [calldata,0x11]
    0x00                               // [0x00, calldata,0x11]
    mstore                             // [0x11]  memory: 0x00 -> error_selector
    0x04                               // [0x04, 0x11]
    mstore                             // []   memory: 0x00 -> error_selector, 0x04 -> error_data
    0x24                               // [0x24]
    0x00                               // [0x00, 0x24]
    revert                             // []
}


#define macro DivZeroError() = takes(0) returns(0) {
    0x12                               // [12]
    __ERROR(DivByZeroError)            // [calldata,12]
    0x00                               // [0, calldata,02]
    mstore                             // [12]  memory: 0x00 -> error_selector
    0x04                               // [0x04, 12]
    mstore                             // []   memory: 0x00 -> error_selector, 0x04 -> error_data
    0x24                               // [0x24]
    0x00                               // [0x00, 0x24]
    revert                             // []
}


#define macro MAX_INTERNAL() = takes(2) returns(3) {
                        // [calldata_num1, calldata_num2, sum, func_selector]
    dup2                // [calldata_num2, calldata_num1, calldata_num2, sum, func_selector]
    dup2                // [calldata_num1, calldata_num2, calldata_num1, calldata_num2, sum, func_selector]
    gt                  // [bool, calldata_num1, calldata_num2, sum, func_selector]
    calldata_num1       // [Pc, bool, calldata_num1 ,calldata_num2, sum, func_selector]
    jumpi               // [calldata_num1 ,calldata_num2, sum, func_selector]
    
    0x01                // [0x01, calldata_num1 ,calldata_num2, sum, func_selector]
    calldata_num2       // [PC, 0x01, calldata_num1 ,calldata_num2, sum, func_selector]
    jumpi               // [calldata_num1,calldata_num2, sum, func_selector]

    calldata_num1:
        swap1           // [calldata_num2 ,calldata_num1, sum, func_selector]
        pop             // [calldata_num1, sum, func_selector]
        dup1            // [calldata_num1, calldata_num1,sum, func_selector]
    
    calldata_num2:
        pop             // [calldata_num2, sum, func_selector]
}


#define macro MIN_INTERNAL() = takes(2) returns(3) {
                        // [calldata_num1, calldata_num2, sub, func_selector]
    dup2                // [calldata_num2, calldata_num1, calldata_num2, sub, func_selector]
    dup2                // [calldata_num1, calldata_num2, calldata_num1, calldata_num2, sub, func_selector]
    gt                  // [bool, calldata_num1, calldata_num2, sub, func_selector]
    calldata_num1       // [Pc, bool, calldata_num1 ,calldata_num2, sub, func_selector]
    jumpi               // [calldata_num1 ,calldata_num2, sub, func_selector]
    
    0x01                // [0x01, calldata_num1 ,calldata_num2, sub, func_selector]
    calldata_num2       // [PC, 0x01, calldata_num1 ,calldata_num2, sub, func_selector]
    jumpi               // [calldata_num1,calldata_num2, sub, func_selector]

    calldata_num1:
        swap1           // [calldata_num2 ,calldata_num1, sub, func_selector]
        pop             // [calldata_num1, sub, func_selector]
        dup1            // [calldata_num1, calldata_num1,sub, func_selector]
    
    calldata_num2:
        pop             // [calldata_num2, sub, func_selector]
}


#define macro Add() = takes(0) returns(0) {
    0x04                               // [0x04, func_selector]
    calldataload                       // [calldata_num1, func_selector]]
    0x24                               // [0x24, calldata_num1, func_selector]]
    calldataload                       // [calldata_num2, calldata_num1, func_selector]]
    
    dup2                               // [calldata_num1, calldata_num2, calldata_num1, func_selector]]
    dup2                               // [calldata_num2, calldata_num1, calldata_num2, calldata_num1, func_selector]]
    add                                // [sum, calldata_num2, calldata_num1, func_selector]
    
    swap2                              // [calldata_num1, calldata_num2, sum, func_selector]
    MAX_INTERNAL()                     // [maxvalue, sum, func_selector]
    dup2                               // [sum, maxvalue, sum, func_selector]
    lt                                 // [bool, sum,func_selector]
    overflowRevert                     // [PC,bool,sum, func_selector]
    jumpi                              // [sum, func_selector]

    swap1                              // [func_selector, sum]
    pop                                // [sum]
    0x00                               // [0, sum]
    mstore                             // []  memory: 0x00 -> sum
    0x20                               // [0x20]
    0x00                               // [0x20, 0]
    return                             // []


    overflowRevert:
        OverflowRevert()
}



#define macro Sub() = takes(0) returns(0) {
    // gas cost is 21870
    0x24                               // [0x24, func_selector]  
    calldataload                       // [calldata_num2, func_selector]
    0x04                               // [0x04, calldata_num2, func_selector]
    calldataload                       // [calldata_num1, calldata_num2, func_selector]

    dup2                               // [calldata_num2, calldata_num1, calldata_num2, func_selector]
    dup2                               // [calldata_num1, calldata_num2, calldata_num1, calldata_num2, func_selector]
    lt                                 // [bool, calldata_num1, calldata_num2, func_selector]
    underflowRevert                    // [PC,bool, calldata_num1, calldata_num2, func_selector]
    jumpi                              // [calldata_num1, calldata_num2, func_selector]

    sub                                // [sub, func_selector]
    
    0x00                               // [0x00, sub, func_selector]
    mstore                             // [func_selector]  memory: 0x00 -> sub
    0x20                               // [0x20]
    0x00                               // [0x20, 0]
    return                             // []

    underflowRevert:
        UnderFlowRevert()

}


#define macro Mul() = takes(0) returns(0) {
    0x04                               // [0x04, func_selector]
    calldataload                       // [calldata_num1, func_selector]
    0x24                               // [0x24, calldata_num1, func_selector]
    calldataload                       // [calldata_num2, calldata_num1, func_selector]
    
    dup2                               // [calldata_num1, calldata_num2, calldata_num1, func_selector]
    dup2                               // [calldata_num2, calldata_num1, calldata_num2, calldata_num1, func_selector]
    mul                                // [mul, calldata_num2, calldata_num1, func_selector]
    dup1                                // [mul, mul, calldata_num2, calldata_num1, func_selector]
    iszero                             // [bool, mul, calldata_num2, calldata_num1, func_selector]
    returnZero                         // [PC, bool, mul, calldata_num2, calldata_num1, func_selector]
    jumpi                              // [mul, calldata_num2, calldata_num1, func_selector]
    swap2                              // [calldata_num1, calldata_num2, mul, func_selector]
    MAX_INTERNAL()                     // [maxvalue, mul, func_selector]
    dup2                               // [mul, maxvalue, mul, func_selector]
    lt                                 // [bool, mul,func_selector]
    overflowRevert                     // [PC,bool,mul, func_selector]
    jumpi                              // [mul, func_selector]
    
    0x00                               // [0x00, mul, func_selector]
    mstore                             // [func_selector]  memory: 0x00 -> mul
    0x20                               // [0x20, func_selector]
    0x00                               // [0x00, 0x20, func_selector]
    return                             // [func_selector]

    overflowRevert:
        OverflowRevert()               
        
    returnZero:
        0x00                            // [0x00]
        0x00                            // [0x00, 0x00]
        mstore                          // []  memory: 0x00 -> 0x00
        0x20                           // [0x20]
        0x00                           // [0x00,0x20]
        return                         // []
}


#define macro Div() = takes(0) returns(0) {
    0x24                               // [0x24, func_selector]
    calldataload                       // [calldata_num2, func_selector]
    0x04                               // [0x04, calldata_num2, func_selector]
    calldataload                       // [calldata_num1, calldata_num2, func_selector]

    dup2                               // [calldata_num2, calldata_num1, calldata_num2, func_selector]
    iszero                             // [bool, calldata_num1, calldata_num2, func_selector]
    div_ZeroError                      // [PC,bool, calldata_num1, calldata_num2, func_selector]
    jumpi                              // [calldata_num1, calldata_num2, func_selector]

    div                                // [div, func_selector]
    
    0x00                               // [0x00, div, func_selector]
    mstore                             // [func_selector]  memory: 0x00 -> div
    0x20                               // [0x20, func_selector]
    0x00                               // [0x00, 0x20, func_selector]
    return                             // []

    div_ZeroError:
        DivZeroError()               
}


#define macro Mod() = takes(0) returns(0) {
    0x24                               // [0x24, func_selector]
    calldataload                       // [calldata_num2, func_selector]
    0x04                               // [0x04, calldata_num2, func_selector]
    calldataload                       // [calldata_num1, calldata_num2, func_selector]

    dup2                               // [calldata_num2, calldata_num1, calldata_num2, func_selector]
    iszero                             // [bool, calldata_num1, calldata_num2, func_selector]
    div_ZeroError                      // [PC,bool, calldata_num1, calldata_num2, func_selector]
    jumpi                              // [calldata_num1, calldata_num2, func_selector]

    mod                                // [mod, func_selector]
    
    0x00                               // [0x00, mod, func_selector]
    mstore                             // [func_selector]  memory: 0x00 -> mod
    0x20                               // [0x20, func_selector]
    0x00                               // [0x00, 0x20, func_selector]
    return                             // []

    div_ZeroError:
        DivZeroError()                 // []
}


#define macro Prime() = takes(0) returns(0) {
    0x04                               // [0x04, func_selector]
    calldataload                       // [calldata_num1, func_selector]

    dup1                               // [calldata_num1, calldata_num1, func_selector]
    0x02                               // [0x02, calldata_num1, calldata_num1, func_selector]
    lt                                 // [bool, calldata_num1, func_selector]
    iszero                             // [bool, calldata_num1, func_selector]
    iszero                             // [bool, calldata_num1, func_selector]
    non_prime                          // [PC,bool, calldata_num1, func_selector]
    jumpi                              // [calldata_num1, func_selector]

    0x02                               // [0x02, calldata_num1, func_selector]
    dup1                               // [calldata_num1, 0x02, calldata_num1, func_selector]
    div                                // [div, calldata_num1, func_selector]





    non_prime:
        0x01                           // [0x01, calldata_num1, func_selector]
        0x00                           // [0x00, 0x01, calldata_num1, func_selector]
        mstore                         //  [calldata_num1, func_selector]  memory: 0x00 -> 0x01  
        0x20                           // [0x20, calldata_num1, func_selector]  memory: 0x00 -> 0x01  
        0x00                           // [0x00, 0x20, calldata_num1, func_selector]   memory: 0x00 -> 0x01  
        return                         // [calldata_num1, func_selector]     memory: 0x00 -> 0x01  
}
   


#define macro SumArray() = takes(0) returns(0) {
    0x44                               // [0x24, func_selector]
    calldatasize                       // [Input_size_Total, func_selector]
    sub                                // [array_size, func_selector]

    // This is the sum variable 
    // sum = 0
    0x00                               // [0x00, array_size, func_selector]
    // this is for the index 
    // i = 0 
    0x00                               // [0x00, 0x00, array_size, func_selector]

    loopBegin:
                                       // [0x00, 0x00, array_size, func_selector]
        dup3                           // [array_size, 0x00, 0x00, array_size, func_selector]


    
}