// This is just a test file 




#define function add(uint256 x, uint256 y) pure returns (uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00
    calldataload
    0xe0
    shr

    __FUNC_SIG(add)
    eq
    ADD_macro
    jumpi

    ADD_macro:
        ADD()
}


#define macro ADD() = takes(0) returns(0) {
    0x04
    calldataload
    0x24
    calldataload
    0x40

    dup2                               // [calldata_num1, calldata_num2, calldata_num1, func_selector]]
    dup2
    add                                // [(calldata_num1 + calldata_num2), calldata_num1, func_selector]]
    
    swap2                              // [calldata_num1, calldata_num2, sum, func_selector]
    MAX_INTERNAL()                     // [maxvalue, sum, func_selector]
    dup2
    lt                                 // [bool, sum,func_selector]
    // overflowRevert                     // [PC,bool,sum, func_selector]
    jumpi

    swap1                              // [func_selector, sum]
    pop                                // [sum]
    0x00                               // [0, sum]
    mstore                             // []  memory: 0x00 -> sum
    0x20                               // [0x20]
    0x00                               // [0x20, 0]
    return                             // []


    // overflowRevert:
    //     OverflowError()
}

#define macro OverflowError() = takes(0) returns(0) {
    0x01                               // [0]
    __ERROR(OverflowError)             // [calldata,0]
    0x00                               // [0, calldata,0]
    mstore                             // [0]  memory: 0x00 -> error_selector
    0x04                               // [0x04, 0]
    mstore                             // []   memory: 0x00 -> error_selector, 0x04 -> error_data
    0x24                               // [0x24]
    0x00                               // [0x24, 0]
    return                             // []
}

#define macro MAX_INTERNAL() = takes(2) returns(3) {
                        // [calldata_num1, calldata_num2, sum, func_selector]
    dup2                // [calldata_num2, calldata_num1, calldata_num2, sum, func_selector]
    dup2                // [calldata_num1, calldata_num2, calldata_num1, calldata_num2, sum, func_selector]
    gt                  // [bool, calldata_num1, calldata_num2, sum, func_selector]
    calldata_num1       // [Pc, bool, calldata_num1 ,calldata_num2, sum, func_selector]
    jumpi               // [calldata_num1 ,calldata_num2, sum, func_selector]
    
    0x01                // [0x01, calldata_num1 ,calldata_num2, sum, func_selector]
    calldata_num2       // [PC, 0x01, calldata_num1 ,calldata_num2, sum, func_selector]
    jumpi               // [calldata_num1,calldata_num2, sum, func_selector]

    calldata_num1:
        swap1           // [calldata_num2 ,calldata_num1, sum, func_selector]
        pop             // [calldata_num1, sum, func_selector]
    
    calldata_num2:
        pop             // [calldata_num2, sum, func_selector]
}